#+author: conao
#+date: <2018-10-25 Thu>

[[https://github.com/conao3/leaf.el][https://img.shields.io/github/tag/conao3/leaf.el.svg?style=flat-square]]
[[https://travis-ci.org/conao3/leaf.el][https://img.shields.io/travis/conao3/leaf.el/master.svg?style=flat-square]]
[[https://github.com/conao3/leaf.el][https://img.shields.io/github/license/conao3/leaf.el.svg?style=flat-square]]
[[https://github.com/conao3/github-header][https://files.conao3.com/github-header/gif/leaf.el.gif]]

- [[#what-is-it][What is it?]]
- [[#how-to-use][How to use?]]
- [[#syntaxes][Syntaxes]]
  - [[#basic-keywords][Basic keywords]]
    - [[#none-keyword][none (keyword)]]
    - [[#require-keyword][:require keyword]]
    - [[#ensure-keyword][:ensure keyword]]
    - [[#defaults-keyword][:defaults keyword]]
  - [[#configuration-keywords][Configuration keywords]]
    - [[#init-keyword][:init keyword]]
    - [[#commands-keywards][:commands keyward]]
    - [[#hook-keyword][:hook keyword]]
    - [[#mode-interpreter-keyword][:mode, :interpreter keyword]]
    - [[#magic-magic-fallback-keyword][:magic, :magic-fallback keyword]]
    - [[#bind-bind-keyword][:bind, :bind* keyword]]
    - [[#pre-setq-setq-keyword][:pre-setq :setq keyword]]
    - [[#setq-default-custom-keyword][:setq-default :custom keyword]]
    - [[#custom-face-keyword][:custom-face keyword]]
    - [[#load-path-keyword][:load-path keyword]]
    - [[#config-keyword][:config keyword]]
  - [[#condition-keywords][Condition keywords]]
    - [[#disabled-keyword][:disabled keyword]]
    - [[#if-when-unless-keyword][:if, :when, :unless keyword]]
  - [[#byte-compile-keywords][Byte compile keywords]]
    - [[#byte-compile-funcs-byte-compile-vars-keywords][:byte-compile-funcs, :byte-compile-vars keyword]]
  - [[#documentation-keywords][Documentation keywords]]
    - [[#doc-file-url-keyword][:doc, :file, :url keyword]]
- [[#developer-information][Developer information]]
  - [[#leafel-mechanism][leaf.el mechanism]]
    - [[#leaf-name-rest-args-macro][leaf (name &rest args) macro]]
    - [[#leaf-core-name-args-function][leaf-core (name args) function]]
      - [[#leaf-append-defaults-plist-function][leaf-append-defaults (plist) function]]
      - [[#leaf-normalize-plist-plsit-mergep-function][leaf-normalize-plist (plsit mergep) function]]
      - [[#leaf-sort-values-plist-plist-function][leaf-sort-values-plist (plist) function]]
    - [[#leaf-pcocess-keywords-name-plist-function][leaf-pcocess-keywords (name plist) function]]
  - [[#adding-custom-keywords][Adding custom keyword(s)]]
    - [[#add-leaf-keywords][Add leaf keyword(s)]]
    - [[#define-leaf-handler][Define leaf handler]]
- [[#migration][Migration]]
  - [[#leaf-v10-to-v20][leaf v1.0 to v2.0]]
- [[#why-we-support-emacs-22][Why We support Emacs-22?]]
- [[#welcome-pr][Welcome PR]]
- [[#special-thanks][Special Thanks]]

* What is it?

  #+ATTR_HTML: title="Join the chat at https://gitter.im/leaf-el/community"
  [[https://gitter.im/leaf-el/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge][file:https://badges.gitter.im/leaf-el/community.svg]]
~leaf.el~ is yet another [[https://github.com/jwiegley/use-package][use-package]].

~leaf.el~ has strong conditional branching symbols, 
making your Emacs configuration simpler.

It operates from Emacs-22, obtains partner [[https://github.com/conao3/feather.el][feather]] and realizes Emacs packages and configurations which can be regenerated. 

You do not have to worry about errors due to reinstallation or environmental differences.

* How to use?
Put ~leaf.el~ at any folder added ~load-path~.
Then ~(require 'leaf)~ and use like ~use-pacakge~

#+BEGIN_SRC emacs-lisp
  ;; add to load-path
  ;; (locate-user-emacs-file "site-lisp/leaf.el")
  ;;  => "~/.emacs.d/local/26.1/site-lisp/leaf.el"

  (add-to-list 'load-path (locate-user-emacs-file "site-lisp/leaf.el"))
  (add-to-list 'load-path (locate-user-emacs-file "site-lisp/feather.el"))

  (require 'leaf)

  (leaf package
    :config
    (add-list-to-list 'package-archives
      '(("org"       . "https://orgmode.org/elpa/")
        ("melpa"     . "https://melpa.org/packages/")
        ("marmalade" . "https://marmalade-repo.org/packages/")))
    (package-initialize))

  (leaf bind-key :ensure t)
#+END_SRC

* Syntaxes
All below examples are excerpts from ~leaf-tests.el~.

These examples are defined in the following format.
We expect FORM will be expanded to EXPECT.
#+begin_src emacs-lisp
  (cort-deftest TESTCASE-NAME
    (match-expansion
     FORM                  ; will be expand by `macroexpand-1'
     'EXPECT))             ; expect FORM's expansion will be EXPECT (test by `equal')

  (cort-deftest TESTCASE-NAME
    (match-expansion-let (LET-ENV)
      FORM                 ; will be expanded by `macroexpand-1' in LET-ENV
      'EXPECT))            ; expect FORM's expansion will be EXPECT (test by `equal')

  ;; test functions, macros return boolean value
  (defun rt () t)
  (defun rnil () nil)
  (defmacro mt () `(rt))
  (defmacro mnil () `(rnil))
#+end_src

** Basic keywords
*** none (keyword)
If ~leaf~ use without specifying any symbol, it transform just ~nil~
#+begin_src emacs-lisp
  (cort-deftest leaf-test:/simple-none
    (match-expansion
     (leaf foo)
     '(progn)))
#+end_src

*** :require keyword
~leaf~ do not ~require~ package when ~nil~ is given.
If ~t~ is given, ~require~ it.
If give multiple values it ~require~ each package.

#+begin_src emacs-lisp
  (cort-deftest leaf-test/:simple-require
    (match-expansion
     (leaf foo
       :require t
       :config (setq bar 'baz))
     '(progn
        (require 'foo)
        (setq bar 'baz))))

  (cort-deftest leaf-test/:simple-require-nil
    (match-expansion
     (leaf foo
       :require nil
       :config (setq bar 'baz))
     '(progn
        (setq bar 'baz))))

  (cort-deftest leaf-test/:simple-multi-require
    (match-expansion
     (leaf foo
       :require foo-hoge foo-piyo
       :config (setq bar 'baz))
     '(progn
        (require 'foo-hoge)
        (require 'foo-piyo)
        (setq bar 'baz))))
#+end_src

*** :ensure keyword
~:ensure~ provide package manager frontend
for example, ~feather.el~ and ~package.el~ etc...

You can customize backend to process ~:ensure~ keyword.
#+BEGIN_SRC emacs-lisp
  ;; use package.el as :ensure backend
  (setq leaf-backend/:ensure 'package)

  ;; use feather.el as :ensure backend
  (setq leaf-backend/:ensure 'feather)

  ;; use no package as :ensure backend (disable :ensure)
  (setq leaf-backend/:ensure nil)
#+END_SRC

~leaf.el~ prepared ~feather.el~ and ~package.el~ backend,
but it's easy to create other package manager's backend.

Of course, loading and setting of the package manager itself must be
completed before using ~:ensure~ keyword.

#+BEGIN_SRC emacs-lisp
  (cort-deftest leaf-test/:simple-ensure
    (match-expansion-let ((leaf-backend/:ensure 'package))
      (leaf foo :ensure t)
      '(progn
         (funcall #'leaf-backend/:ensure-package 'foo 'foo)
         (progn))))
#+END_SRC

*** :defaults keyword
~:defalts~ provide to download recommended settings for specified package.
For more detail, see [[https://github.com/conao3/leaf-defaults.git][leaf-defaults]].
#+BEGIN_SRC emacs-lisp
  (cort-deftest leaf-test/:simple-defaults
    (match-expansion-let ((leaf-backend/:ensure 'package))
     (leaf foo :ensure t :defaults t)
     '(progn
        (funcall #'leaf-backend/:ensure-package 'foo 'foo)
        (feather-install-defaults 'foo)
        (progn))))
#+END_SRC

** Configuration keywords
*** :init keyword
~:init~ keyword expect sexp will be evaluated before ~require~ package.
(Not wait package autoload)
#+begin_src emacs-lisp
  (cort-deftest leaf-test/:simple-init
    (match-expansion
     (leaf foo
           :init
           (setq bar1 'baz)
           (setq bar2 'baz))
     '(progn
        (progn
          (setq bar1 'baz)
          (setq bar2 'baz))
        (progn))))
#+end_src

*** :commands keyward
~:commands~ keyword define additional autoload commands.

#+BEGIN_SRC emacs-lisp
  (cort-deftest leaf-test/:simple-commands
    (match-expansion
     (leaf ace-jump-mode
       :commands ace-jump-mode)
     '(progn
        (add-hook #'ace-jump-mode "ace-jump-mode" nil t))))

  (cort-deftest leaf-test/:simple-multi-commands
    (match-expansion
     (leaf ace-jump-mode
       :commands ace-jump-mode command1 command2)
     '(progn
        (add-hook #'ace-jump-mode "ace-jump-mode" nil t)
        (add-hook #'command1 "ace-jump-mode" nil t)
        (add-hook #'command2 "ace-jump-mode" nil t))))
#+END_SRC

*** :hook keyword
~:hook~ keyword define ~add-hook~.

#+BEGIN_SRC emacs-lisp
  (cort-deftest leaf-test/:simple-hook
    (match-expansion
     (leaf ace-jump-mode
       :hook cc-mode-hook)
     '(progn
    (autoload #'ace-jump-mode "ace-jump-mode" nil t)
    (add-hook 'cc-mode-hook #'ace-jump-mode))))

  (cort-deftest leaf-test/:simple-multi-hook
    (match-expansion
     (leaf ace-jump-mode
       :hook cc-mode-hook (prog-mode-hook . ace-jump-mode))
     '(progn
        (autoload #'ace-jump-mode "ace-jump-mode" nil t)
        (add-hook 'cc-mode-hook #'ace-jump-mode)
        (add-hook 'prog-mode-hook #'ace-jump-mode))))
#+END_SRC

*** :mode, :interpreter keyword
~:mode~ keyword define ~auto-mode-alist~. When open file, enable major-mode.
~:interpreter~ keyword define ~interpreter-mode-alist~. enable major-mode by shebang.

If you pass symbol to these keyword, adopd package name.
If you want to specify major-mode, pass dotted pair value.

#+BEGIN_SRC emacs-lisp
  (cort-deftest leaf-test/:simple-mode
    (match-expansion
     (leaf ruby-mode
       :mode "\\.rb\\'"
       :interpreter "ruby")
     '(progn
        (autoload #'ruby-mode "ruby-mode" nil t)
        (leaf-list-add-to-list 'auto-mode-alist
                               '(("\\.rb\\'" . ruby-mode)))
        (autoload #'ruby-mode "ruby-mode" nil t)
        (leaf-list-add-to-list 'interpreter-mode-alist
                               '(("ruby" . ruby-mode))))))

  (cort-deftest leaf-test/:simple-multi-mode
    (match-expansion
     (leaf ruby-mode
       :mode "\\.rb\\'" "\\.rb2\\'" ("\\.rbg\\'" . rb-mode)
       :interpreter "ruby")
     '(progn
        (autoload #'ruby-mode "ruby-mode" nil t)
        (autoload #'rb-mode "ruby-mode" nil t)
        (leaf-list-add-to-list 'auto-mode-alist
                               '(("\\.rb\\'" . ruby-mode)
                                 ("\\.rb2\\'" . ruby-mode)
                                 ("\\.rbg\\'" . rb-mode)))
        (autoload #'ruby-mode "ruby-mode" nil t)
        (leaf-list-add-to-list 'interpreter-mode-alist
                               '(("ruby" . ruby-mode))))))
#+END_SRC

*** :magic :magic-fallback keyword
~:magic~ keyword define ~magic-mode-alist~. It is used to determine major-mode by
binary header byte.
~:magic-fallback~  keyward also define ~magic-fallback-alist~

#+BEGIN_SRC emacs-lisp
(cort-deftest leaf-test/:simple-magic
  (match-expansion
   (leaf pdf-tools
     :magic ("%PDF" . pdf-view-mode)
     :config
     (pdf-tools-install))
   '(progn
      (autoload #'pdf-tools "pdf-tools" nil t)
      (autoload #'pdf-view-mode "pdf-tools" nil t)
      (leaf-list-add-to-list 'magic-mode-alist
                             '(("%PDF" . pdf-view-mode)))
      (pdf-tools-install))))

(cort-deftest leaf-test/:simple-magic-fallback
  (match-expansion
   (leaf pdf-tools
     :magic-fallback ("%PDF" . pdf-view-mode)
     :config
     (pdf-tools-install))
   '(progn
      (autoload #'pdf-tools "pdf-tools" nil t)
      (autoload #'pdf-view-mode "pdf-tools" nil t)
      (leaf-list-add-to-list 'magic-fallback-mode-alist
                             '(("%PDF" . pdf-view-mode)))
      (pdf-tools-install))))
#+END_SRC

*** :bind, :bind* keyword
~:bind~ provide ~bind-key.el~ frontend.

You can customize backend to process ~:ensure~ keyword.
#+BEGIN_SRC emacs-lisp
  ;; use package.el as :bind backend
  (setq leaf-backend/:bind  'bind-key
        leaf-backend/:bind* 'bind-key)

  ;; use no package as :bind backend (disable :bind, bind*)
  (setq leaf-backend/:bind  nil
        leaf-backend/:bind* nil)
#+END_SRC

~leaf.el~ provide ~bind-key.el~ backend,
but it's easy to create other package manager's backend.

#+BEGIN_SRC emacs-lisp
  (cort-deftest leaf-test/:simple-bind
    (match-expansion-let ((leaf-backend/:bind 'bind-key))
      (leaf foo
        :bind (("M-s O" . moccur)
               :map isearch-mode-map
               ("M-o" . isearch-moccur)
               ("M-O" . isearch-moccur-all))
        :init
        (setq isearch-lazy-highlight t)
        :config
        (leaf moccur-edit))
      '(progn
         (progn
           (setq isearch-lazy-highlight t))
         (progn
           (funcall #'leaf-backend/:bind-bind-key 'foo
                    '(("M-s O" . moccur)
                      :map isearch-mode-map
                      ("M-o" . isearch-moccur)
                      ("M-O" . isearch-moccur-all)))
           (leaf moccur-edit)))))
#+END_SRC
Of course, setting and requiring of the backend itself must be
completed before using ~:ensure~ keyword.

*** :pre-setq :setq keyword
~pre-setq~, ~post-setq~ to setq before and after ~require~ package.
#+BEGIN_SRC emacs-lisp
  (cort-deftest leaf-test/:simple-pre-setq
    (match-expansion
     (leaf foo
       :pre-setq ((bar . 'baz))
       :init (foo-pre-init)
       :config (foo-post-init))
     '(progn
        (setq bar 'baz)
        (progn
          (progn
            (foo-pre-init))
          (progn
            (foo-post-init))))))

  (cort-deftest leaf-test/:simple-post-setq
    (match-expansion
     (leaf foo
       :setq ((bar . 'baz))
       :init (foo-pre-init)
       :config (foo-post-init))
     '(progn
        (progn
          (foo-pre-init))
        (progn
          (setq bar 'baz)
          (foo-post-init)))))
#+END_SRC

*** :setq-default :custom keyword
~:setq-default~, ~:custom~ to itself after ~require~ package
#+BEGIN_SRC emacs-lisp
  (cort-deftest leaf-test/:simple-post-setq
    (match-expansion
     (leaf foo
       :setq ((bar . 'baz))
       :init (foo-pre-init)
       :config (foo-post-init))
     '(progn
        (progn
          (foo-pre-init))
        (progn
          (setq bar 'baz)
          (foo-post-init)))))

  (cort-deftest leaf-test/:simple-custom-set-variables
    (match-expansion
     (leaf foo
       :custom-set-variables ((bar . 'baz))
       :init (foo-pre-init)
       :config (foo-post-init))
     '(progn
        (progn
          (foo-pre-init))
        (progn
          (custom-set-variables '(bar 'baz))
          (foo-post-init)))))
#+END_SRC

*** :custom-face keyword
~:custom-face~ keyword define custom-face by ~custom-set-faces~.

#+BEGIN_SRC emacs-lisp
  (cort-deftest leaf-test/:simple-custom-face
    (match-expansion
     (leaf eruby-mode
       :custom-face
       (eruby-standard-face ((t (:slant italic)))))
     '(progn
        (custom-set-faces
         '(eruby-standard-face
           ((t
             (:slant italic))))))))

  (cort-deftest leaf-test/:simple-multi-custom-face
    (match-expansion
     (leaf eruby-mode
       :custom-face
       (eruby-standard-face ((t (:slant italic))))
       (eruby-standard-face2 ((t (:slant italic)))))
     '(progn
        (custom-set-faces
         '(eruby-standard-face
           ((t
             (:slant italic)))))
        (custom-set-faces
         '(eruby-standard-face2
           ((t
             (:slant italic))))))))
#+END_SRC

*** :load-path keyword
~:load-path~ keyword add loadpath located on ~user-setting-directory~.

#+BEGIN_SRC emacs-lisp
  (match-expansion
   (leaf ivy
     :load-path "site-lisp/swiper" "site-lisp/ivy")
   '(progn
      (leaf-list-add-to-list 'load-path
                             ("~/.emacs.d/local/26.1/site-lisp/swiper"
                              "~/.emacs.d/local/26.1/site-lisp/ivy"))
      (progn)))

  (match-expansion
   (leaf ivy
     :load-path "site-lisp/swiper")
   '(progn
      (leaf-list-add-to-list 'load-path
                             ("~/.emacs.d/local/26.1/site-lisp/swiper"))
      (progn)))
#+END_SRC
*** :config keyword
~:config~ keyword expect sexp will evaluated after ~require~ package.

#+BEGIN_SRC emacs-lisp
  (cort-deftest leaf-test/:simple-config
    (match-expansion
     (leaf foo :config (setq bar 'baz))
     '(progn
        (setq bar 'baz))))

  (cort-deftest leaf-test/:simple-init-config
    (match-expansion
     (leaf foo :require foo-hoge foo-piyo
           :init
           (setq bar1 'baz)
           (setq bar2 'baz)
           :config
           (setq bar3 'baz)
           (setq bar4 'baz))
     '(progn
        (progn
          (setq bar1 'baz)
          (setq bar2 'baz))
        (progn
          (require 'foo-hoge)
          (require 'foo-piyo)
          (setq bar3 'baz)
          (setq bar4 'baz)))))
#+END_SRC
** Condition keywords
*** :disabled keyword
~:disabled~ keyword expect boolean.

If you put ~:disabled t~ keyword, that ~leaf~ block just converting to nil.

Ignore the specification of ~:disabled~ by setting ~t~ to ~nil~.

~:disabled~ will adopt the value of value declared first.
#+begin_src emacs-lisp
  ;; simple :disabled t pattern
  ;; :disabled t => disable block (convert to just nil)
  (cort-deftest leaf-test:/simple-disabled-t
    (match-expansion
     (leaf foo :disabled t)
     'nil))

  ;; simple :disabled nil pattern
  ;; :disabled nil => ignore :disabled
  (cort-deftest leaf-test:/simple-disabled-nil
    (match-expansion
     (leaf foo :disabled nil)
     '(progn)))

  ;; multiple :disabled value is ok, adoped first value.
  ;; :disabled t nil => :disabled t => disable block
  (cort-deftest leaf-test:/disabled-4-
    (match-expansion
     (leaf foo :disabled t nil :config (message "bar"))
     'nil))

  ;; multiple :disabled keyword is ok, adoped first value.
  ;; :disabled nil t t => :disabled nil => ignore :disabled
  (cort-deftest leaf-test:/disabled-5+
    (match-expansion
     (leaf foo :disabled nil t :config (message "bar") :disabled t)
     '(progn
        (message "bar"))))

  ;; :disabled keyword value allowed functions and macros returns boolean value.
  ;; :disable (rt) (rnil) (rt) => :disable t nil t => :disable t
  (cort-deftest leaf-test:/disabled-5++
    (match-expansion
     (leaf foo :disabled (rnil) (rt) :config (message "bar") :disabled (rt))
     '(progn
        (message "bar"))))
#+end_src

*** :if, :when, :unless keyword
~:if~, ~:when~, ~:unless~ keywords expect sexp return boolean or just boolean value
and wrap converted sexp specified function.

If specified multiple those keywords, evaluate sexp in ~and~.
#+begin_src emacs-lisp
  ;; simple :if pattern
  (cort-deftest leaf-test:/simple-if
    (match-expansion
     (leaf foo :if t)
     '(if t
          (progn
            (progn)))))

  ;; simple :when pattern
  (cort-deftest leaf-test/:simple-when
    (match-expansion
     (leaf foo :when t)
     '(when t
         (progn))))

  ;; simple :unless pattern
  (cort-deftest leaf-test/:simple-unless
    (match-expansion
     (leaf foo :unless t)
     '(unless t
         (progn))))

  ;; multiple :if pattern
  (cort-deftest leaf-test/:simple-multi-if
    (match-expansion
     (leaf foo :if (rt) :if (rnil) (mt))
     '(if (and (rt) (rnil) (mt))
          (progn
            (progn)))))

  ;; multiple condition pattern
  ;; sorted in the order :if, :when, :unless and merge.
  (cort-deftest leaf-test/:simple-multi-conds
    (match-expansion
     (leaf foo :if (rt) :when (rnil) (mt) :unless (rt) :if (rnil))
     '(if (and (rt) (rnil))
          (progn
            (when (and (rnil) (mt))
              (unless (rt)
                (progn)))))))

  ;; if you want to evaluate sexp in `or', just specify that sexp.
  (cort-deftest leaf-test/:if-2
    (match-expansion
     (leaf foo :if (or (rt) (rnil)))
     '(if (or (rt) (rnil))
          (progn
            (progn)))))
#+end_src

** Byte compile keywords
*** :byte-compile-funcs, :byte-compile-vars keyword
~:byte-compile-funcs~ and ~:byte-compile-vars~ to tell bytecompiler.

#+BEGIN_SRC emacs-lisp
  (cort-deftest leaf-test/:simple-multi-byte-compile-vars
    (match-expansion
     (leaf for
       :byte-compile-vars for-var1 for-var2)
     '(progn
        (eval-when-compile
          (defvar for-var1)
          (defvar for-var2))
        (progn))))

  (cort-deftest leaf-test/:simple-multi-byte-compile-funcs
    (match-expansion
     (leaf for
       :byte-compile-funcs ((hoge-fn1 . hoge)
                            (hoge-fn2 . hoge)))
     '(progn
        (eval-when-compile
          (autoload #'hoge-fn1 "hoge" nil t)
          (autoload #'hoge-fn2 "hoge" nil t))
        (progn))))
#+END_SRC

** Documentation keywords
*** :doc, :file, :url keyword
~leaf.el~ can describe a document with an affinity grammar.
By default, ~:doc~, ~:file~, ~:url~ keywords are provided.

In fact, these keywords are simply ignored.

#+BEGIN_SRC emacs-lisp
  (cort-deftest leaf-test/:simple-doc-keyword
    (match-expansion
     (leaf foo
       :doc "this package is awesome!!"
       :require nil
       :config (setq bar 'baz))
     '(progn
        (setq bar 'baz))))

  (cort-deftest leaf-test/:simple-doc-keywords
    (match-expansion
     (leaf foo
       :doc "this package is awesome!!"
       :file "~/path/to/package/file.el"
       :url "https://www.example.com/"
       :require nil
       :config (setq bar 'baz))
     '(progn
        (setq bar 'baz))))
#+END_SRC

I think that you can use various ways of using such as
describing the URL you referred to, writing a brief description of the package,
writing a file path for FFAP.

If you want other keywords, you can easily add them. (see source)
#+BEGIN_SRC emacs-lisp
  ;; top-level operation, but don't do anything when don't need it.
  ;; (eg when loading multiple times)
  (mapc (lambda (x)
          (unless (memq x leaf-keywords)
            (leaf-add-doc-keyword x)))
        (reverse '(:doc :file :url)))
#+END_SRC

* Developer information
~leaf.el~ creates the intended elisp code from DSL with a simple mechanism.

It is clear what internal conversion is done and it is also easy to customize it.
** leaf.el mechanism
*** ~leaf (name &rest args)~ macro
This is ~leaf.el~ frontend macro. Users use only this macro.

Process.
1. Pass arguments to ~leaf-core~.

*** ~leaf-core (name args)~ function
This is the core process for leaf macro expansion.

Process.
1. ~leaf-append-defaults~ to append default value (~leaf-defaults~) to ARGS
2. ~leaf-normalize-plist~ to normalize pseudo-plist, ARGS
3. ~leaf-sort-values-plist~ to sort ARGS
4. pass NAME and ARGS to ~leaf-process-keywords~

**** ~leaf-append-defaults (plist)~ function
Append leaf default values to PLIST.
See ~leaf-defaults~. You can customize this value.

EXAMPLE:
#+BEGIN_SRC emacs-lisp
  (leaf-append-defaults nil)
  -> (:init nil)

  (leaf-append-defaults '(:require foo))
  -> (:require foo :init nil)
#+END_SRC

**** ~leaf-normalize-plist (plsit mergep)~ function
Given a pseudo-PLIST, return PLIST,
if MERGEP is t, return well-formed PLIST.

MERGEP every ~t~ in leaf.

EXAMPLE:
#+BEGIN_SRC emacs-lisp
  (leaf-normalize-plist
    '(:defer t
      :config (message "a") (message "b")
      :config (message "c")) nil)
   -> (:defer (t)
       :config ((message "a") (message "b"))
       :config ((message "c")))

  (leaf-normalize-plist
    '(:defer t
      :config (message "a") (message "b")
      :config (message "c")) t)
   -> (:defer (t)
       :config ((message "a") (message "b") (message "c"))
#+END_SRC

**** ~leaf-sort-values-plist (plist)~ function
Given a list-valued PLIST, return sorted-list PLIST by order ~leaf-keywords~.

EXAMPLE:
(leaf-sort-values-plist
  '(:config (message "a")
    :disabled (t)))
 -> (:disabled (t)
     :config (message "a"))

*** ~leaf-pcocess-keywords (name plist)~ function
Process keywords for NAME.
The KEY and VALUE are taken from the PLIST and pass to the handler.

The handler is named leaf-handler/KEY.

** Adding custom keyword(s)
~leaf.el~ can easily be expanded by adding keywords.

Actually, it is realized by two steps of adding keyword and adding handler.

Example:
#+BEGIN_SRC emacs-lisp
  (cort-deftest leaf-test/:simple-keyword-add
    (match-expansion
     (leaf foo
       :require h s :message-post-require "foo!" :config (setq bar 'baz))
     '(progn
        (require 'h)
        (require 's)
        (message "foo!")
        (setq bar 'baz))))

  (cort-deftest leaf-test/:simple-keyword-add-2
    (match-expansion
     (leaf foo
       :require h s
       :message-post-require "foo!"
       :config (setq bar 'baz)
       :message-post-require "post!"
       :message-pre-require "pre")
     '(progn
        (message "pre")
        (require 'h)
        (require 's)
        (message "foo!")
        (message "post!")
        (setq bar 'baz))))

  (cort-deftest leaf-test/:simple-keyword-list-add
    (match-expansion
     (leaf foo
       :require h s
       :tmp-pre (message "start tmp")
       :tmp-post (setq foo 'bar)
       :tmp-pre (message "really start tmp!"))
     '(progn
        (require 'h)
        (require 's)
        (message "start tmp")
        (message "really start tmp!")
        (setq foo 'bar))))
#+END_SRC

*** Add leaf keyword(s)
The keyword has an appropriate place in ~leaf-keywords~.

Because the keywords are sorted in order of ~leaf-keywords~,
and they are processed and expanded in that order.

You can use these functions to add keyword(s)
- ~leaf-add-keyword-before (target belm)~
- ~leaf-add-keyword-after (target aelm)~
- ~leaf-add-keyword-list-before (targetlst belm)~
- ~leaf-add-keyword-list-after (targetlst aelm)~

If you message before ~require~, you should use
~(leaf-add-keyword-before :message-pre-require :require)~.

Or if you message after ~require~, you should use
~(leaf-add-keyword-after :message-post-require :require)~.

You can add keywords like,
~(leaf-add-keyword-list-after '(:tmp-pre :tmp-post) :config)~

*** Define leaf handler
Then, you should define a handler for new keyword(s) each.

NOTE: Since VALUE is a list, be careful when implementing a handler.
#+BEGIN_SRC emacs-lisp
  (defun leaf-handler/:message-pre-require (name value rest)
    "process :message-pre-require."
    (let ((body (leaf-process-keywords name rest)))
      `(,@(mapcar (lambda (x) `(message ,x)) value) ,@body)))

  (defun leaf-handler/:message-post-require (name value rest)
    "process :message-post-require."
    (let ((body (leaf-process-keywords name rest)))
      `(,@(mapcar (lambda (x) `(message ,x)) value) ,@body)))

  (defun leaf-handler/:tmp-pre (name value rest)
    "process :tmp-pre."
    (let ((body (leaf-process-keywords name rest)))
      `(,@value ,@body)))

  (defun leaf-handler/:tmp-post (name value rest)
    "process :tmp-post."
    (let ((body (leaf-process-keywords name rest)))
      `(,@value ,@body)))
#+END_SRC

* Migration
** leaf v1.0 to v2.0
*** Change not to ~require~ by default
In order to realize the philosophy of "Leaf of setting",
we changed it so as not to ~require~ by default.

If you want to request explicitly use the ~:require t~ flag.
#+begin_src emacs-lisp
  ;; behavior of leaf v2.0
  (leaf foo)
  => (progn)

  (leaf foo :require t)
  => (progn
       (require 'foo))

  ;; behavior of leaf v1.0
  (leaf foo)
  => (progn
       (require 'foo))

  (leaf foo :require t)
  => (progn
       (require 'foo))
#+end_src
* Why We support Emacs-22?
Bundling Emacs-22.1 on macOS 10.13 (High Sierra), we support this.

* Welcome PR
We welcome PR!
Travis Cl test ~leaf-test.el~ with all Emacs version 23 or above.

I think that it is difficult to prepare the environment locally, 
so I think that it is good to throw PR and test Travis for the time being!
Feel free throw PR!

* Special Thanks
Advice and comments given by [[http://emacs-jp.github.io/][Emacs-JP]]'s forum member has been a great help
in developing ~leaf.el~.

Thank you very much!!
